
(* communication channel *)
free c:channel.

(* trying to create a mac scheme *)
type key. (* the same keys are used for mac'ing and encrypting, so I need some way to use the same key *)
fun mac (bitstring , key): bitstring.

const one : bitstring.
const two : bitstring.
const three : bitstring.
const four : bitstring.


(* type skey. *)
type coins.
(* probabilistic  Symmetric encryption *)
fun internal_senc(bitstring , key , coins): bitstring.

reduc forall m:bitstring , k:key , r:coins;
   sdecProb(internal_senc(m,k,r),k) = m.

letfun sencDET(x:bitstring,y:key) = new r: coins; internal_senc(x,y,r).
(* Deterministic symmetric encryption *)

fun senc(bitstring, key): bitstring.

reduc forall m:bitstring, k :key; sdec(senc(m,k),k) = m.
(* aes encryption for key generation *)

fun KgenSenc(bitstring, key): key.

(* query of basic secrecy: *)
free m:bitstring [private].

query attacker(m).

event endED().
event endJS().

(*integrity query *)

event JSrcv(bitstring).
event EDsend(bitstring).


let ED(AppKey :key, NwkKey :key, JoinEUI :bitstring,DevEUI :bitstring, DevNonce : bitstring) =
    (* 1. Make handshake *)
    let tag1 = mac((JoinEUI , DevEUI , DevNonce), NwkKey) in
    out(c, (JoinEUI,DevEUI,DevNonce, tag1));
    in(c, ciphetext: bitstring);

    let (JoinNonce: bitstring, Home_NetID : bitstring,DevAddr: bitstring, tag2 :bitstring) = sdec(ciphetext, NwkKey) in
    (* handshake done, now generate keys *)
    let FNwkSIntKey = KgenSenc((JoinNonce, JoinEUI, DevNonce,one), NwkKey) in
    let SnwkSIntKey = KgenSenc((JoinNonce, JoinEUI, DevNonce, three), NwkKey) in
    let AppsKey  = KgenSenc((JoinNonce, JoinEUI, DevNonce, two), NwkKey) in
    let NwkSEncKey  = KgenSenc((JoinNonce, JoinEUI, DevNonce, four), NwkKey) in
    (* send messages *)
    !(new FCntUp : coins; (* incrementing nonce *)
     let outCipher = senc((m,FCntUp),NwkSEncKey) in 
     let tag3 = mac( (DevAddr, FCntUp, m),NwkSEncKey) in
     out(c,(outCipher,tag3));
     event endED()).(*also sending nonce along *)



let JS(AppKey :key, NwkKey :key,DevEUI :bitstring, JoinEUI :bitstring, DevAddr : bitstring) =
    (* 1. Make handshake *)
    in(c,(=JoinEUI, =DevEUI, DevNonce : bitstring, tag: bitstring));
    if mac((JoinEUI, DevEUI,DevNonce), NwkKey) = tag then
    new JoinNonce : bitstring; (*A incrementing counter-nonce, perhaps another construction should be used for this *)
    new Home_NetID : bitstring;
    let tag2 : bitstring = mac((JoinNonce,Home_NetID, DevAddr), NwkKey) in
    out(c,senc((JoinNonce, Home_NetID, DevAddr, tag2),NwkKey)); (*using deterministic senc function, maybe wrong *)
    (*2 . handshake done, now generate keys *)
    let FNwkSIntKey = KgenSenc((JoinNonce, JoinEUI, DevNonce,one), NwkKey) in
    let SnwkSIntKey = KgenSenc((JoinNonce, JoinEUI, DevNonce, three), NwkKey) in
    let AppsKey  = KgenSenc((JoinNonce, JoinEUI, DevNonce,two), NwkKey) in
    let NwkSEncKey  = KgenSenc((JoinNonce, JoinEUI, DevNonce,four), NwkKey) in

    (*3.  receive messages *)
    !(in(c,(cipher : bitstring,tag3 : bitstring));
     let (plaintext2 :bitstring,FCntUp:coins ) = sdec(cipher,NwkSEncKey) in
     if tag3 = mac((DevAddr, FCntUp, plaintext2), NwkSEncKey) then
     event endJS()).

query attacker(new JoinNonce).
query event (endED()).
query event (endJS()).

process
    new Appkey :key;
    new NwkKey :key;
    new JoinEUI :bitstring;
    
    new DevEUI :bitstring;
    new DevNonce: bitstring;
    new DevAddr: bitstring;
    (* first we assume that attacker knows the JOINserver: *)
    out(c,JoinEUI);
    ((ED(Appkey, NwkKey, JoinEUI,DevEUI,DevNonce)) | (JS(Appkey, NwkKey,DevEUI,JoinEUI,DevAddr)))
    | phase 1; out(c, Appkey); out(c, NwkKey)
    


