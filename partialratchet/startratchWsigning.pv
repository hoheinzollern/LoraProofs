
(* I start by defining some constants that I suspect might by of significance, or maybe I just use them for certain values
to not be exactly the same  *)
const K_2m_constantstring : bitstring.
const IV_2m_constantstring : bitstring.
const K_3m_constantstring : bitstring.
const IV_3m_constantstring : bitstring.
const K_3ae_constantstring : bitstring.
const IV_3ae_constantstring : bitstring.
const K_4ae_constantstring : bitstring.
const IV_4ae_constantstring : bitstring.
const SCK_constantstring : bitstring.
const RCK_constantstring : bitstring.
const emptystring : bitstring.

const cred_AS : bitstring. (* possible point of contention *)
const cred_ED : bitstring.

const msg3Nonce : bitstring.




(* hashinh primitive: *)

fun sha256(bitstring): bitstring.

(* key derivation functions *)
type extractkey.
type expandkey.
const emptyexpandKey : expandkey.
const emptyextractKey : extractkey.


(* diffie hellman ratchet shceme *)

type G. (*group elements *)
const g: G [data].
type exponent. (*exponent used for creating pk from secret key *)
fun exp(G,exponent): G.
equation forall x:exponent, y:exponent; exp(exp(g,x),y) = exp(exp(g,y), x).





(* key ratchet shceme, including encryption and decryption *)
type ratchKey.
fun ratchetKey(G, bitstring): ratchKey. (* grrrr why won't you return two things????! *)
fun ratchetSeed(G,bitstring):bitstring.
fun senc ( bitstring , ratchKey ) : bitstring.
reduc forall m: bitstring , k : ratchKey ; sdec(senc(m, k) , k ) = m.

(* extract functions: *)



fun HKDFextract(extractkey, G) : extractkey.


fun HKDFexpand(extractkey,  bitstring, bitstring) : expandkey. (*input: expandkey, hash, constant string *)

(* authenticated encryption *)

(* argument of the form: Key, IV , plaintext, associated auth data *)
fun AEAD_enc(expandkey,expandkey, bitstring, bitstring) : bitstring.

reduc forall k:expandkey, IV:expandkey, p:bitstring, AD:bitstring;
    AEAD_dec(AEAD_enc(k,IV,p,AD), k, IV, AD) = p.

reduc forall k:expandkey, IV:expandkey, p:bitstring, AD:bitstring; (* for the case that an empty string is used for plaintext *)
    AEAD_dec_unsafe(AEAD_enc(k,IV,p,AD), k, IV) = p.

fun epxandKey_bitstring(expandkey) : bitstring [typeConverter].

(* XOR *)


fun xor(bitstring,bitstring): bitstring.

reduc forall a:bitstring, b:bitstring;
    xordecrypt(xor(a,b), b) = a. (* for advsersary *)
reduc forall a:bitstring, b:bitstring;
    xorBreak(xor(a,b), a) = b.  (* for advsersary *)


type sskey.
type spkey.
fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.


reduc forall m: bitstring , k : sskey; getmess ( sign(m, k ) ) = m.
reduc forall m: bitstring, k : sskey ; checksign( sign(m, k ) , spk(k) ) = m.

(*))AppKey :key, NwkKey :key, JoinEUI :bitstring,DevEUI :bitstring, DevNonce : bitstring) = *)

(*TODO: increment counter nonce *)
event EDsendmessage1().
event ASgetmessage1().

event ASsendmesage2().
event EDgetmessage2().

event EDsendmessage3().
event ASgetmessage3().

event ASsendmesage4().
event EDgetmessage4().
event debug().


query event (debug()).
query event (EDsendmessage1()).

query 
    event (ASgetmessage1())==> event (EDsendmessage1()).


query 
    event (EDgetmessage2())==> event (ASsendmesage2()).


query 
    event (ASgetmessage3())==> event (EDsendmessage3()).


(*)
query 
    event (EDgetmessage4())==> event (ASsendmesage4()).   *)


event sendmsg(bitstring).
event rcvmsg(bitstring).




free c :channel.
free downlink : channel.
free uplink : channel.

free store_uplink : channel [private].

let ED(devEUI : bitstring, appEUI : bitstring, EDsecretkey : sskey, EDpubkey : spkey, ASpubeky: spkey) = 
    (* generate key pair *)

    new privEK_ED :exponent;
    let pubEK_ED = exp(g, privEK_ED) in

    (* sending message 1 *)
    event EDsendmessage1();
    let sign1 = sign((pubEK_ED, devEUI, appEUI) ,EDsecretkey) in
    event EDgetmessage4();
    out(c, ((pubEK_ED, devEUI, appEUI),sign1));

    let intermediateHash = sha256((pubEK_ED, devEUI, appEUI)) in (* calculating the hash on m1 *)
    
        (* receiving message 2: *)
    in(c, ((pubEK_AS : G, =appEUI, ciphertext_2 : bitstring),    sign2 :bitstring)); 
    if checksign( sign2 , ASpubeky ) = (pubEK_AS , appEUI, ciphertext_2) then
    event EDgetmessage2();
    let PRK_2e = HKDFextract(emptyextractKey, exp(pubEK_AS, privEK_ED)) in
    let TH_2 = sha256((intermediateHash, pubEK_AS, appEUI)) in 
    let Keystream_2 = epxandKey_bitstring(HKDFexpand(PRK_2e, TH_2, emptystring)) in
    let (=cred_AS, MAC_2 : bitstring) = xorBreak(ciphertext_2, Keystream_2) in (* this is weird, I can put anything in cred_AS *)
    let PRK_3e2m = HKDFextract(PRK_2e,exp(pubEK_AS, privEK_ED)) in
    let  K_2m = HKDFexpand(PRK_3e2m, TH_2,K_2m_constantstring) in 
    let IV_2m = HKDFexpand(PRK_3e2m, TH_2, IV_2m_constantstring) in
    let A = (TH_2, cred_AS) in 
    if AEAD_enc(K_2m, IV_2m, emptystring, A) = MAC_2 then
        (* generating message 3 *)

    let TH_3 = sha256((TH_2, ciphertext_2)) in 
    let PRK_4x3m = HKDFextract(PRK_3e2m, exp(pubEK_AS, privEK_ED)) in
    let  K_3m = HKDFexpand(PRK_4x3m, TH_3,K_3m_constantstring) in 
    let IV_3m = HKDFexpand(PRK_3e2m, TH_3, IV_3m_constantstring) in
    let A1 = (TH_2, cred_AS) in 
    let MAC_3 = AEAD_enc(K_3m, IV_3m, emptystring, A) in
    let K_3ae = HKDFexpand(PRK_3e2m, TH_3,K_2m_constantstring) in 
    let IV_3ae = HKDFexpand(PRK_3e2m, TH_3, IV_3ae_constantstring) in
    let P_2 = (cred_ED, MAC_3) in
    let A_1 = (emptystring, TH_3) in 
    let ciphertext_3 = AEAD_enc(K_3ae, IV_3ae, P_2, A_1) in
    let sign3 = sign(ciphertext_3 ,EDsecretkey) in
    event EDsendmessage3();
    out(c, (ciphertext_3, sign3));

    0.







let AS(devEUI : bitstring, appEUI : bitstring, ASsecretkey : sskey, Aspubkey : spkey, EDpubky: spkey) = 
    (* generate key pair *)
    new privEK_AS :exponent;
    let pubEK_AS = exp(g,privEK_AS) in
    (* getting message one and unpack: *)
    in(c,(m1:bitstring, sign1 :bitstring));
    if checksign( sign1 , EDpubky ) = m1 then
    event ASgetmessage1();

    let (pubEK_ED : G, =devEUI, =appEUI ) = m1 in

    (* generating message 2: *)
    let intermediateHash = sha256(m1) in 
    let TH_2 = sha256((intermediateHash, pubEK_AS, appEUI)) in 
    let PRK_2e = HKDFextract(emptyextractKey, exp(pubEK_ED, privEK_AS)) in
    let PRK_3e2m = HKDFextract(PRK_2e,exp(pubEK_ED, privEK_AS)) in
    let  K_2m = HKDFexpand(PRK_3e2m, TH_2,K_2m_constantstring) in 
    let IV_2m = HKDFexpand(PRK_3e2m, TH_2, IV_2m_constantstring) in 
    let A_0 = (TH_2, cred_AS) in 
    let MAC_2 = AEAD_enc(K_2m, IV_2m, emptystring, A_0) in
    let P_2 = (cred_AS, MAC_2) in
    let Keystream_2 = HKDFexpand(PRK_2e, TH_2,emptystring) in
    let ciphertext_2 = xor(P_2, epxandKey_bitstring(Keystream_2)) in
    let sign2 = sign((pubEK_AS, appEUI, ciphertext_2) ,ASsecretkey) in
    event ASsendmesage2();
    out(c, ((pubEK_AS, appEUI, ciphertext_2), sign2));    

    (* receiving message 3 *)
    in(c, (ciphertext_3 : bitstring, sign3:bitstring));
    if checksign( sign3 , EDpubky ) = ciphertext_3 then
    event ASgetmessage3();
    let TH_3 = sha256((TH_2, ciphertext_2)) in 
    let PRK_4x3m = HKDFextract(PRK_3e2m, exp(pubEK_ED, privEK_AS)) in
    let  K_3m = HKDFexpand(PRK_4x3m, TH_3,K_3m_constantstring) in 
    let IV_3m = HKDFexpand(PRK_3e2m, TH_3, IV_3m_constantstring) in
    let K_3ae = HKDFexpand(PRK_3e2m, TH_3,K_3ae_constantstring) in
    let IV_3ae = HKDFexpand(PRK_3e2m, TH_3, IV_3ae_constantstring) in
    let A_1 = (emptystring, TH_3) in 
    let (=cred_ED, MAC_3 : bitstring) = AEAD_dec(ciphertext_3,K_3ae, IV_3ae, A_1) in (* I can put in any value Ã¥for ID_CRED??? *)
    if AEAD_enc(K_3m, IV_3m, emptystring, A_1) = MAC_3 then




    0.








process
    new ASsecretsignkey : sskey;
    let ASpublicsignkey = spk(ASsecretsignkey) in 
    new EDsecretsignkey : sskey;
    let EDpublicsignkey = spk(EDsecretsignkey) in 
    new devEUI :bitstring;
    new appEUI :bitstring;
    ((ED(devEUI, appEUI,EDsecretsignkey, EDpublicsignkey,ASpublicsignkey)) | (AS(devEUI, appEUI,ASsecretsignkey,ASpublicsignkey,EDpublicsignkey )))